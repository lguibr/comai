File: requirements.txt
click
langchain-anthropic
langchain-openai
langchain
langchain-community
setuptools
types-setuptools


File: setup.py
# -*- coding: utf-8 -*-
from setuptools import find_packages, setup

with open("README.md", "r") as fh:
    long_description = fh.read()
repo_url = "https://github.com/lguibr/commitai"
setup(
    name="commitai",
    version="0.1.11",
    author="Luis Guilherme",
    author_email="lgpelin92@gmail.com",
    packages=find_packages(),
    description="Commitai helps you generate git commit messages using AI",
    long_description=long_description,
    long_description_content_type="text/markdown",
    url=repo_url,
    project_urls={
        "Bug Tracker": f"{repo_url}/issues",
        "Documentation": f"{repo_url}/blob/main/README.md",
        "Source Code": repo_url,
    },
    classifiers=[
        "Development Status :: 3 - Alpha",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
    ],
    python_requires=">=3.6",
    install_requires=[
        "langchain",
        "click",
        "langchain-community",
        "langchain-anthropic",
        "langchain-openai",
        "setuptools",
    ],
    entry_points={
        "console_scripts": [
            "commitai = commitai.cli:main",
        ],
    },
)


File: .pre-commit-config.yaml
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-yaml
      - id: end-of-file-fixer
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: debug-statements
      - id: fix-encoding-pragma

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: isort (python)
        args: ["--settings-path", ".isort.cfg"]

  - repo: https://github.com/psf/black
    rev: 24.2.0
    hooks:
      - id: black
        language_version: python3.11

  - repo: https://github.com/PyCQA/flake8
    rev: 7.0.0
    hooks:
      - id: flake8

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.9.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]


File: README.md
# CommitAi - Commit Message AI

[![CI](https://github.com/lguibr/commitai/workflows/CI/badge.svg)](https://github.com/lguibr/commitai/actions)
[![PyPI](https://img.shields.io/pypi/v/CommitAi.svg)](https://pypi.org/project/CommitAi/)
[![Python Version](https://img.shields.io/pypi/pyversions/CommitAi.svg)](https://pypi.org/project/CommitAi/)
[![License](https://img.shields.io/pypi/l/CommitAi.svg)](https://github.com/lguibr/CommitAi/blob/main/LICENSE)

commitai is a command-line tool that helps you generate informative and relevant commit messages for your Git repositories using AI language models like GPT-4 and Claude. It analyzes your staged changes, combines them with a high-level explanation provided by you, and creates a commit message based on this information. Additionally, it supports custom commit message templates and a back command to reset to previous commits. This not only saves you time and effort but also ensures a consistent and meaningful commit history.

## Prerequisites

- Python 3.x
- API keys for the desired language models (e.g., OpenAI API key for GPT-4, Anthropic API key for Claude)

## Installation

You can install commitai using pip:

pip install commitai

## Configuration

### Environment Variables

Before using commitai, you need to set the API key environment variables for the language models you want to use. For example:

export OPENAI_API_KEY="your_openai_api_key"
export ANTHROPIC_API_KEY="your_anthropic_api_key"

You can also set the `TEMPLATE_COMMIT` environment variable to define a global template for your commit messages:

export TEMPLATE_COMMIT="My global custom template: {message}"

### Template Configuration

#### Creating a Template for the Repository

You can create a custom template specific to the repository using the `create-template` command. This template will override the global template set in the `TEMPLATE_COMMIT` environment variable if present.

commitai create-template "My repository-specific template: {message}"

This command will create a hidden file inside the `.git` directory to store the template.

## Usage

### Generating Commit Messages

commitai generate "This is a high-level explanation of my commit"

- Use the `-a` or `--add` flag to stage all changes.
- Use the `-c` or `--commit` flag to automatically create the commit.
- Use the `-t` or `--template` flag for custom templates or utilize the `TEMPLATE_COMMIT` environment variable. If no template is provided, a default or global template will be used.
- Use the `-m` or `--model` flag to specify the language model to use (default: `gpt-4`).

## Contributing

We welcome contributions to the commitai project! Please feel free to submit issues, feature requests, or pull requests.

## License

This project is released under the MIT License.


File: .gitignore
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Distribution / packaging
dist/
build/
*.egg-info/
*.egg

# Virtual environments
venv/
.venv/

# IDE files
.vscode/
.idea/

# Miscellaneous
*.log
*.swp
*.swo
*.bak


File: .isort.cfg
[settings]
profile = black
multi_line_output = 3
include_trailing_comma = True
force_grid_wrap = 0
use_parentheses = True
ensure_newline_before_comments = True
line_length = 88


File: commitai/git.py
# -*- coding: utf-8 -*-
import os
import subprocess
from typing import Optional


def get_repository_name() -> str:
    return (
        subprocess.check_output(["git", "rev-parse", "--show-toplevel"])
        .strip()
        .decode()
    )


def get_current_branch_name() -> str:
    return (
        subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"])
        .strip()
        .decode()
    )


def get_staged_changes_diff() -> str:
    return subprocess.check_output(["git", "diff", "--staged"]).decode()


def stage_all_changes() -> None:
    subprocess.run(["git", "add", "--all"])


def create_commit(message: str) -> None:
    subprocess.run(["git", "commit", "-m", message])


def get_commit_template() -> Optional[str]:
    repo_path = get_repository_name()
    template_path = os.path.join(repo_path, ".git", "commit_template.txt")
    if os.path.exists(template_path):
        with open(template_path, "r") as f:
            return f.read()
    return os.getenv("TEMPLATE_COMMIT")


def save_commit_template(template: str) -> None:
    repo_path = get_repository_name()
    template_path = os.path.join(repo_path, ".git", "commit_template.txt")
    with open(template_path, "w") as f:
        f.write(template)


File: commitai/__init__.py


File: commitai/cli.py
# -*- coding: utf-8 -*-
import click
from langchain_anthropic import ChatAnthropic
from langchain_openai import ChatOpenAI

from commitai.git import (
    create_commit,
    get_commit_template,
    get_current_branch_name,
    get_repository_name,
    get_staged_changes_diff,
    save_commit_template,
    stage_all_changes,
)


@click.group(context_settings=dict(help_option_names=["-h", "--help"]))
def cli():
    pass


@cli.command()
@click.argument("description_or_command", nargs=-1, type=click.UNPROCESSED)
@click.option(
    "--commit",
    "-c",
    is_flag=True,
    help="Commit the changes with the generated message",
)
@click.option(
    "--template",
    "-t",
    default=None,
    help="Specify a commit message template",
)
@click.option(
    "--add",
    "-a",
    is_flag=True,
    help="Stage all changes before generating the commit message",
)
@click.option(
    "--model",
    "-m",
    default="claude-opus",
    help="Set the engine model to be used",
)
def main(description_or_command, commit, template, add, model):

    description_or_command_exists = len(description_or_command) > 1
    is_command = (
        description_or_command[0] == "create-template"
        if description_or_command_exists
        else False
    )

    if is_command:
        if len(description_or_command) > 1:
            template_content = " ".join(description_or_command[1:])
            save_commit_template(template_content)
            click.echo("Template saved successfully.")
            return
        else:
            click.echo("Please provide the template content.")
        return

    explanation = " ".join(description_or_command)
    if model == "gpt-4":
        llm = ChatOpenAI(model_name="gpt-4")
    elif model == "claude-opus":
        llm = ChatAnthropic(model="claude-3-opus-20240229")
    else:
        click.echo(f"Unsupported model: {model}")
        return

    if add:
        stage_all_changes()

    diff = get_staged_changes_diff()
    if not diff:
        click.echo("Warning: No staged changes found. Exiting.")
        return

    repo_name = get_repository_name()
    branch_name = get_current_branch_name()
    formatted_diff = f"{repo_name}/{branch_name}\n\n{diff}"

    if not template:
        template = get_commit_template()

    system_message = (
        "You are a helpful git commit assistant. "
        "You will receive a git diff and generate a commit message."
        "Try to be meaningful and avoid generic messages."
    )
    if template:
        system_message += "The message should follow this template: "
        system_message += template

    user_message = formatted_diff
    if explanation:
        user_message = (
            f"Here is a high-level explanation of the commit: "
            f"{explanation}\n\n{user_message}"
        )

    input_message = f"{system_message}\n\n{user_message}"
    ai_message = llm.invoke(input=input_message)
    commit_message = ai_message.content

    if commit:
        create_commit(commit_message)
        click.echo(f"Committed message:\n\n{commit_message}")
    else:
        repo_path = get_repository_name()
        commit_msg_path = os.path.join(repo_path, ".git", "COMMIT_EDITMSG")
        # Open default git editor for editing the commit message
        with open(commit_msg_path, "w") as f:
            f.write(commit_message)
        click.edit(filename=".git/COMMIT_EDITMSG")

        # Read the edited commit message
        with open(commit_msg_path, "r") as f:
            edited_commit_message = f.read().strip()

        # Create the commit with the edited message
        create_commit(edited_commit_message)
        click.echo(f"Committed message:\n\n{edited_commit_message}")


if __name__ == "__main__":
    cli()


File: commitai.egg-info/top_level.txt
commitai


File: commitai.egg-info/PKG-INFO
Metadata-Version: 2.1
Name: commitai
Version: 0.1.10
Summary: Commitai helps you generate git commit messages using AI
Home-page: https://github.com/lguibr/commitai
Author: Luis Guilherme
Author-email: lgpelin92@gmail.com
Project-URL: Bug Tracker, https://github.com/lguibr/commitai/issues
Project-URL: Documentation, https://github.com/lguibr/commitai/blob/main/README.md
Project-URL: Source Code, https://github.com/lguibr/commitai
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Python: >=3.6
Description-Content-Type: text/markdown

# CommitAi - Commit Message AI

[![CI](https://github.com/lguibr/commitai/workflows/CI/badge.svg)](https://github.com/lguibr/commitai/actions)
[![PyPI](https://img.shields.io/pypi/v/CommitAi.svg)](https://pypi.org/project/CommitAi/)
[![Python Version](https://img.shields.io/pypi/pyversions/CommitAi.svg)](https://pypi.org/project/CommitAi/)
[![License](https://img.shields.io/pypi/l/CommitAi.svg)](https://github.com/lguibr/CommitAi/blob/main/LICENSE)

commitai is a command-line tool that helps you generate informative and relevant commit messages for your Git repositories using AI language models like GPT-4 and Claude. It analyzes your staged changes, combines them with a high-level explanation provided by you, and creates a commit message based on this information. Additionally, it supports custom commit message templates and a back command to reset to previous commits. This not only saves you time and effort but also ensures a consistent and meaningful commit history.

## Prerequisites

- Python 3.x
- API keys for the desired language models (e.g., OpenAI API key for GPT-4, Anthropic API key for Claude)

## Installation

You can install commitai using pip:

pip install commitai

## Configuration

### Environment Variables

Before using commitai, you need to set the API key environment variables for the language models you want to use. For example:

export OPENAI_API_KEY="your_openai_api_key"
export ANTHROPIC_API_KEY="your_anthropic_api_key"

You can also set the `TEMPLATE_COMMIT` environment variable to define a global template for your commit messages:

export TEMPLATE_COMMIT="My global custom template: {message}"

### Template Configuration

#### Creating a Template for the Repository

You can create a custom template specific to the repository using the `create-template` command. This template will override the global template set in the `TEMPLATE_COMMIT` environment variable if present.

commitai create-template "My repository-specific template: {message}"

This command will create a hidden file inside the `.git` directory to store the template.

## Usage

### Generating Commit Messages

commitai generate "This is a high-level explanation of my commit"

- Use the `-a` or `--add` flag to stage all changes.
- Use the `-c` or `--commit` flag to automatically create the commit.
- Use the `-t` or `--template` flag for custom templates or utilize the `TEMPLATE_COMMIT` environment variable. If no template is provided, a default or global template will be used.
- Use the `-m` or `--model` flag to specify the language model to use (default: `gpt-4`).

## Contributing

We welcome contributions to the commitai project! Please feel free to submit issues, feature requests, or pull requests.

## License

This project is released under the MIT License.


File: commitai.egg-info/entry_points.txt
[console_scripts]
commitai = commitai.cli:main


File: commitai.egg-info/SOURCES.txt
README.md
setup.py
commitai/__init__.py
commitai/cli.py
commitai/git.py
commitai.egg-info/PKG-INFO
commitai.egg-info/SOURCES.txt
commitai.egg-info/dependency_links.txt
commitai.egg-info/entry_points.txt
commitai.egg-info/requires.txt
commitai.egg-info/top_level.txt

File: commitai.egg-info/requires.txt
click
langchain
langchain-anthropic
langchain-community
langchain-openai
setuptools


File: build/lib/commitai/git.py
# -*- coding: utf-8 -*-
import os
import subprocess
from typing import Optional


def get_repository_name() -> str:
    return (
        subprocess.check_output(["git", "rev-parse", "--show-toplevel"])
        .strip()
        .decode()
    )


def get_current_branch_name() -> str:
    return (
        subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"])
        .strip()
        .decode()
    )


def get_staged_changes_diff() -> str:
    return subprocess.check_output(["git", "diff", "--staged"]).decode()


def stage_all_changes() -> None:
    subprocess.run(["git", "add", "--all"])


def create_commit(message: str) -> None:
    subprocess.run(["git", "commit", "-m", message])


def get_commit_template() -> Optional[str]:
    repo_path = get_repository_name()
    template_path = os.path.join(repo_path, ".git", "commit_template.txt")
    if os.path.exists(template_path):
        with open(template_path, "r") as f:
            return f.read()
    return os.getenv("TEMPLATE_COMMIT")


def save_commit_template(template: str) -> None:
    repo_path = get_repository_name()
    template_path = os.path.join(repo_path, ".git", "commit_template.txt")
    with open(template_path, "w") as f:
        f.write(template)


File: build/lib/commitai/__init__.py


File: build/lib/commitai/cli.py
# -*- coding: utf-8 -*-
import click
from langchain_anthropic import ChatAnthropic
from langchain_openai import ChatOpenAI

from commitai.git import (
    create_commit,
    get_commit_template,
    get_current_branch_name,
    get_repository_name,
    get_staged_changes_diff,
    save_commit_template,
    stage_all_changes,
)


@click.group(context_settings=dict(help_option_names=["-h", "--help"]))
def cli():
    pass


@cli.command()
@click.argument("description_or_command", nargs=-1, type=click.UNPROCESSED)
@click.option(
    "--commit",
    "-c",
    is_flag=True,
    help="Commit the changes with the generated message",
)
@click.option(
    "--template",
    "-t",
    default=None,
    help="Specify a commit message template",
)
@click.option(
    "--add",
    "-a",
    is_flag=True,
    help="Stage all changes before generating the commit message",
)
@click.option(
    "--model",
    "-m",
    default="claude-opus",
    help="Set the engine model to be used",
)
def main(description_or_command, commit, template, add, model):

    description_or_command_exists = len(description_or_command) > 1
    is_command = (
        description_or_command[0] == "create-template"
        if description_or_command_exists
        else False
    )

    if is_command:
        if len(description_or_command) > 1:
            template_content = " ".join(description_or_command[1:])
            save_commit_template(template_content)
            click.echo("Template saved successfully.")
            return
        else:
            click.echo("Please provide the template content.")
        return

    explanation = " ".join(description_or_command)
    if model == "gpt-4":
        llm = ChatOpenAI(model_name="gpt-4")
    elif model == "claude-opus":
        llm = ChatAnthropic(model="claude-3-opus-20240229")
    else:
        click.echo(f"Unsupported model: {model}")
        return

    if add:
        stage_all_changes()

    diff = get_staged_changes_diff()
    if not diff:
        click.echo("Warning: No staged changes found. Exiting.")
        return

    repo_name = get_repository_name()
    branch_name = get_current_branch_name()
    formatted_diff = f"{repo_name}/{branch_name}\n\n{diff}"

    if not template:
        template = get_commit_template()

    system_message = (
        "You are a helpful git commit assistant. "
        "You will receive a git diff and generate a commit message."
        "Try to be meaningful and avoid generic messages."
    )
    if template:
        system_message += "The message should follow this template: "
        system_message += template

    user_message = formatted_diff
    if explanation:
        user_message = (
            f"Here is a high-level explanation of the commit: "
            f"{explanation}\n\n{user_message}"
        )

    input_message = f"{system_message}\n\n{user_message}"
    ai_message = llm.invoke(input=input_message)
    commit_message = ai_message.content

    if commit:
        create_commit(commit_message)
        click.echo(f"Committed message:\n\n{commit_message}")
    else:
        # Open default git editor for editing the commit message
        with open(".git/COMMIT_EDITMSG", "w") as f:
            f.write(commit_message)
        click.edit(filename=".git/COMMIT_EDITMSG")

        # Read the edited commit message
        with open(".git/COMMIT_EDITMSG", "r") as f:
            edited_commit_message = f.read().strip()

        # Create the commit with the edited message
        create_commit(edited_commit_message)
        click.echo(f"Committed message:\n\n{edited_commit_message}")


if __name__ == "__main__":
    cli()


File: .github/workflows/main.yml
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Lint with flake8
        run: |
          flake8 .

  type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy
          pip install -r requirements.txt\
      - name: Type check with mypy
        run: |
          mypy .

  bump-version:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [lint, type-check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Bump version
        id: bump_version
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          current_version=$(grep -oP 'version="\K[^"]+' setup.py)
          major=$(echo $current_version | cut -d '.' -f 1)
          minor=$(echo $current_version | cut -d '.' -f 2)
          patch=$(echo $current_version | cut -d '.' -f 3)
          new_version="$major.$minor.$((patch + 1))"
          sed -i "s/version=\"$current_version\"/version=\"$new_version\"/g" setup.py
          git add setup.py
          git commit -m "Bump version to $new_version"
          git push
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [bump-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
      - name: Build package
        run: python setup.py sdist bdist_wheel
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}


File: .git/description
Unnamed repository; edit this file 'description' to name the repository.


File: .git/packed-refs
# pack-refs with: peeled fully-peeled sorted
97f6c630aad2e9da23fd99d0f2847c0eb70a70aa refs/remotes/origin/main


File: .git/AUTO_MERGE
dbbff69de81619bf0cef35b9e0f6893d57ec4b90


File: .git/FETCH_HEAD
7cb7451d1e89662c710402055027b6ef69e2eed7		branch 'main' of https://github.com/lguibr/comai


File: .git/HEAD
ref: refs/heads/main


File: .git/COMMIT_EDITMSG
ENH Improve CLI functionality and remove unnecessary features

* Remove the `back` command for resetting commits
  - This functionality is not directly related to the core purpose of commitai
* Add support for creating commit templates using the `create-template` command
  - Users can now save custom commit templates by running `commitai create-template "template content"`
* Modify the `main` command to accept a description or command as a single argument
  - This allows users to provide a commit description or run the `create-template` command
  - The `create-template` command is executed if the first argument matches "create-template"
* Update the README to reflect the changes in functionality
  - Remove the section about resetting commits
  - Add information about the new `create-template` command

The changes simplify the CLI by removing the `back` command, which is not essential to the core functionality of commitai. Instead, the focus is shifted towards improving the commit generation process by allowing users to create custom commit templates using the `create-template` command.

 Co-authored-by: Comai <github.com/lguibr/comai>


File: .git/ORIG_HEAD
bf6e2b15fe37237493cf4997d8595191bc8fb27e


File: .git/config
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = https://github.com/lguibr/comai.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main


File: .git/refs/remotes/origin/HEAD
ref: refs/remotes/origin/main


File: .git/refs/remotes/origin/main
2f10bb4403f5d2f90bac4271bf16845ebd3b688b


File: .git/refs/heads/main
2f10bb4403f5d2f90bac4271bf16845ebd3b688b


File: .git/hooks/update.sample
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0


File: .git/hooks/prepare-commit-msg.sample
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi


File: .git/hooks/push-to-checkout.sample
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi


File: .git/hooks/fsmonitor-watchman.sample
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}


File: .git/hooks/pre-merge-commit.sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:


File: .git/hooks/pre-receive.sample
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi


File: .git/hooks/pre-commit
#!/usr/bin/env bash
# File generated by pre-commit: https://pre-commit.com
# ID: 138fd403232d2ddd5efb44317e38bf03

# start templated
INSTALL_PYTHON=/usr/bin/python3.11
ARGS=(hook-impl --config=.pre-commit-config.yaml --hook-type=pre-commit)
# end templated

HERE="$(cd "$(dirname "$0")" && pwd)"
ARGS+=(--hook-dir "$HERE" -- "$@")

if [ -x "$INSTALL_PYTHON" ]; then
    exec "$INSTALL_PYTHON" -mpre_commit "${ARGS[@]}"
elif command -v pre-commit > /dev/null; then
    exec pre-commit "${ARGS[@]}"
else
    echo '`pre-commit` not found.  Did you forget to activate your virtualenv?' 1>&2
    exit 1
fi


File: .git/hooks/pre-commit.sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --


File: .git/hooks/applypatch-msg.sample
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:


File: .git/hooks/pre-applypatch.sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:


File: .git/hooks/commit-msg.sample
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}


File: .git/hooks/pre-rebase.sample
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END


File: .git/hooks/pre-push.sample
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0


File: .git/hooks/post-update.sample
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info


File: .git/info/exclude
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~


File: .git/logs/HEAD
0000000000000000000000000000000000000000 97f6c630aad2e9da23fd99d0f2847c0eb70a70aa Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1705695531 -0300	clone: from https://github.com/lguibr/comai.git
97f6c630aad2e9da23fd99d0f2847c0eb70a70aa 631c48ad46d1bd7b1da63940a9cb4abb86434340 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709938374 -0300	commit: [FEA] Add continuous integration, .gitignore, and refactored README.md
631c48ad46d1bd7b1da63940a9cb4abb86434340 02d151397bc1ffb5b084dbd6e1fe1ebf9a919a99 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709938775 -0300	commit: [ENH] Refactor cli.py and update dependencies in setup.py
02d151397bc1ffb5b084dbd6e1fe1ebf9a919a99 631c48ad46d1bd7b1da63940a9cb4abb86434340 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709939524 -0300	reset: moving to HEAD~1
631c48ad46d1bd7b1da63940a9cb4abb86434340 97f6c630aad2e9da23fd99d0f2847c0eb70a70aa Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709939528 -0300	reset: moving to HEAD~1
97f6c630aad2e9da23fd99d0f2847c0eb70a70aa a1561890fdaa5c5667e23bf4476254e55f1e48ae Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709939618 -0300	commit: [FEA] Add Python-based Comai CLI tool for generating AI-assisted commit messages
a1561890fdaa5c5667e23bf4476254e55f1e48ae 6d816597fdb0fa37bd178642e8a9c40e55a8840b Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709943817 -0300	commit: FEA Add pre-commit config and update setup for code quality
6d816597fdb0fa37bd178642e8a9c40e55a8840b fc5aa7fd7e3d92649831b56d3982658ca3ab1e7d Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709944029 -0300	commit: [ENH] Update PyPI publishing workflow to use a dedicated user for authentication
fc5aa7fd7e3d92649831b56d3982658ca3ab1e7d e5498d38b077925ffb71a2197bf94da92f4e620e Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709944389 -0300	commit: ENH Introduce project dependencies in a requirements.txt file
e5498d38b077925ffb71a2197bf94da92f4e620e 0d09355e0597564d3a66a8ca4885f57712c5c4f3 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709944572 -0300	commit: FEA Add requirements installation to GitHub Actions
0d09355e0597564d3a66a8ca4885f57712c5c4f3 e25f7868977643c86f80736b0fbf44a03d2d3104 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709944761 -0300	commit: [ENH] Streamline requirements.txt and setup.py dependencies
e25f7868977643c86f80736b0fbf44a03d2d3104 7814a453e9ecfd79e12a3c229dc7d89e7e8274f3 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709945276 -0300	commit: [ENH] Improve project setup and documentation
7814a453e9ecfd79e12a3c229dc7d89e7e8274f3 e9c1d0933ff45924840cd765e1fad3b44aa541c6 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709945502 -0300	commit: [FEA] commitai: Generate informative commit messages using AI
e9c1d0933ff45924840cd765e1fad3b44aa541c6 321aab66100e079bca5bb3057bd263e8c35af97d Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709946243 -0300	commit: [FEA] Add GitHub Actions workflow for publishing to PyPI
321aab66100e079bca5bb3057bd263e8c35af97d e9c1d0933ff45924840cd765e1fad3b44aa541c6 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709946355 -0300	reset: moving to HEAD~1
e9c1d0933ff45924840cd765e1fad3b44aa541c6 321aab66100e079bca5bb3057bd263e8c35af97d Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709946378 -0300	pull: Fast-forward
321aab66100e079bca5bb3057bd263e8c35af97d 1beb8c94d994f8853cd2b8b792afcf3680f81f83 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709946423 -0300	commit: [ ENH ] Add PyPI authentication for publishing package
1beb8c94d994f8853cd2b8b792afcf3680f81f83 a9da2967195c2aae5c93d3560f323044d7e060f5 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709947372 -0300	commit: [ENH] Improve setup.py with additional metadata for better package distribution
a9da2967195c2aae5c93d3560f323044d7e060f5 db690b6b50d3aa683f8ab5c650593f8e283260b1 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709948753 -0300	commit: [ENH] Improve setup.py with additional metadata for better package distribution
db690b6b50d3aa683f8ab5c650593f8e283260b1 93b3fe16ed57c8cca277e4abfbe03f79605f0e16 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709948903 -0300	commit: ENH Improve setup.py by fixing project URL formatting
93b3fe16ed57c8cca277e4abfbe03f79605f0e16 dc3792646edae26ec4dd6722e05b90b9676211b4 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710001887 -0300	commit: [ENH] Improve project metadata and packaging configuration
dc3792646edae26ec4dd6722e05b90b9676211b4 e700bf3d6f848c37d00e696d4c5d9903c8466a27 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710008965 -0300	commit: [ENH] Enhance CI/CD pipeline with version bumping and PyPI publishing
e700bf3d6f848c37d00e696d4c5d9903c8466a27 e035b286871560206b9f2d42159ec28920892721 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010105 -0300	commit: [ENH] Update pre-commit hooks and add setuptools to requirements
e035b286871560206b9f2d42159ec28920892721 0d8ca03d3217f0130a3a802d5f0e7e04045ccf1f Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010414 -0300	commit: [ENH] Add setuptools and types-setuptools as dependencies
0d8ca03d3217f0130a3a802d5f0e7e04045ccf1f a03449e29a8ca582ce978d2b9d030ce722a42a2c Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010630 -0300	commit: [ENH] Add badges to README for CI status, PyPI version, Python version, and license
a03449e29a8ca582ce978d2b9d030ce722a42a2c 3c1f2ddd85f0b216fcb35bbb21a72453a9e81634 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010642 -0300	pull -r origin main (start): checkout 3c1f2ddd85f0b216fcb35bbb21a72453a9e81634
3c1f2ddd85f0b216fcb35bbb21a72453a9e81634 8246ec0259b51f308d3b46c3bb8aeb70878911c5 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010642 -0300	pull -r origin main (pick): [ENH] Add badges to README for CI status, PyPI version, Python version, and license
8246ec0259b51f308d3b46c3bb8aeb70878911c5 8246ec0259b51f308d3b46c3bb8aeb70878911c5 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010642 -0300	pull -r origin main (finish): returning to refs/heads/main
8246ec0259b51f308d3b46c3bb8aeb70878911c5 3638f1f9552ce141bd53f3522b6a0640abe2dff5 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010821 -0300	pull: Fast-forward
3638f1f9552ce141bd53f3522b6a0640abe2dff5 c138b6aa0d46a85f0a4a95d43fe3ed8dacc5e8e9 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010884 -0300	commit: [ENH] Enhance README with project details, usage instructions, and license information
c138b6aa0d46a85f0a4a95d43fe3ed8dacc5e8e9 ca052eee1f66fd1e50f07f88b6aaa37d93f271d8 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011701 -0300	commit: [ENH] Improve README with updated project name, badges, and description
ca052eee1f66fd1e50f07f88b6aaa37d93f271d8 93856da6c768dd98a5ff96f3fdda99fab280b7eb Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011708 -0300	pull -r origin main (start): checkout 93856da6c768dd98a5ff96f3fdda99fab280b7eb
93856da6c768dd98a5ff96f3fdda99fab280b7eb 971623d62741c2ee615f1d1fd31aba92fa3b5996 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011708 -0300	pull -r origin main (pick): [ENH] Improve README with updated project name, badges, and description
971623d62741c2ee615f1d1fd31aba92fa3b5996 971623d62741c2ee615f1d1fd31aba92fa3b5996 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011708 -0300	pull -r origin main (finish): returning to refs/heads/main
971623d62741c2ee615f1d1fd31aba92fa3b5996 7e3b30970041dd50885b5bdaba2b4f7ae87d124c Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011816 -0300	commit: [ENH] Update README with correct license badge link
7e3b30970041dd50885b5bdaba2b4f7ae87d124c 1ffe9359847823ddaf8d53f2de033986efbf812d Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011823 -0300	pull -r origin main (start): checkout 1ffe9359847823ddaf8d53f2de033986efbf812d
1ffe9359847823ddaf8d53f2de033986efbf812d 3a90366b100df67d46c10612b5248a6e733d23a5 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011823 -0300	pull -r origin main (pick): [ENH] Update README with correct license badge link
3a90366b100df67d46c10612b5248a6e733d23a5 3a90366b100df67d46c10612b5248a6e733d23a5 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011823 -0300	pull -r origin main (finish): returning to refs/heads/main
3a90366b100df67d46c10612b5248a6e733d23a5 cb8109e4c54904036810fffaf01321436b22c4b9 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011907 -0300	pull: Fast-forward
cb8109e4c54904036810fffaf01321436b22c4b9 ae468087bed19efcf6ea8c40df1344aca1316f80 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011968 -0300	commit: [ENH] Update README badges and links to reflect new repository name
ae468087bed19efcf6ea8c40df1344aca1316f80 ef1310162f0e618722881e82569697a0d9ccc566 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710255137 -0300	commit: ENH Improve handling of commit message template
ef1310162f0e618722881e82569697a0d9ccc566 9dc300b19fbb5ba261e8eda2aabd334523e90499 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710257104 -0300	pull -r origin main (start): checkout 9dc300b19fbb5ba261e8eda2aabd334523e90499
9dc300b19fbb5ba261e8eda2aabd334523e90499 6e294935a33722fe072f09d10baf71c6611006f4 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710257104 -0300	pull -r origin main (pick): ENH Improve handling of commit message template
6e294935a33722fe072f09d10baf71c6611006f4 6e294935a33722fe072f09d10baf71c6611006f4 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710257104 -0300	pull -r origin main (finish): returning to refs/heads/main
6e294935a33722fe072f09d10baf71c6611006f4 bf6e2b15fe37237493cf4997d8595191bc8fb27e Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710259969 -0300	commit: ENH Improve CLI functionality and remove unnecessary features
bf6e2b15fe37237493cf4997d8595191bc8fb27e 7cb7451d1e89662c710402055027b6ef69e2eed7 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710260507 -0300	pull -r origin main (start): checkout 7cb7451d1e89662c710402055027b6ef69e2eed7
7cb7451d1e89662c710402055027b6ef69e2eed7 2f10bb4403f5d2f90bac4271bf16845ebd3b688b Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710260507 -0300	pull -r origin main (pick): ENH Improve CLI functionality and remove unnecessary features
2f10bb4403f5d2f90bac4271bf16845ebd3b688b 2f10bb4403f5d2f90bac4271bf16845ebd3b688b Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710260507 -0300	pull -r origin main (finish): returning to refs/heads/main


File: .git/logs/refs/remotes/origin/HEAD
0000000000000000000000000000000000000000 97f6c630aad2e9da23fd99d0f2847c0eb70a70aa Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1705695531 -0300	clone: from https://github.com/lguibr/comai.git


File: .git/logs/refs/remotes/origin/main
97f6c630aad2e9da23fd99d0f2847c0eb70a70aa a1561890fdaa5c5667e23bf4476254e55f1e48ae Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709941854 -0300	update by push
a1561890fdaa5c5667e23bf4476254e55f1e48ae 6d816597fdb0fa37bd178642e8a9c40e55a8840b Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709943823 -0300	update by push
6d816597fdb0fa37bd178642e8a9c40e55a8840b fc5aa7fd7e3d92649831b56d3982658ca3ab1e7d Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709944031 -0300	update by push
fc5aa7fd7e3d92649831b56d3982658ca3ab1e7d e5498d38b077925ffb71a2197bf94da92f4e620e Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709944391 -0300	update by push
e5498d38b077925ffb71a2197bf94da92f4e620e 0d09355e0597564d3a66a8ca4885f57712c5c4f3 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709944574 -0300	update by push
0d09355e0597564d3a66a8ca4885f57712c5c4f3 e25f7868977643c86f80736b0fbf44a03d2d3104 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709944764 -0300	update by push
e25f7868977643c86f80736b0fbf44a03d2d3104 7814a453e9ecfd79e12a3c229dc7d89e7e8274f3 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709945278 -0300	update by push
7814a453e9ecfd79e12a3c229dc7d89e7e8274f3 e9c1d0933ff45924840cd765e1fad3b44aa541c6 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709945506 -0300	update by push
e9c1d0933ff45924840cd765e1fad3b44aa541c6 321aab66100e079bca5bb3057bd263e8c35af97d Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709946245 -0300	update by push
321aab66100e079bca5bb3057bd263e8c35af97d 1beb8c94d994f8853cd2b8b792afcf3680f81f83 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709946424 -0300	update by push
1beb8c94d994f8853cd2b8b792afcf3680f81f83 a9da2967195c2aae5c93d3560f323044d7e060f5 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709947375 -0300	update by push
a9da2967195c2aae5c93d3560f323044d7e060f5 db690b6b50d3aa683f8ab5c650593f8e283260b1 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709948755 -0300	update by push
db690b6b50d3aa683f8ab5c650593f8e283260b1 93b3fe16ed57c8cca277e4abfbe03f79605f0e16 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709948905 -0300	update by push
93b3fe16ed57c8cca277e4abfbe03f79605f0e16 dc3792646edae26ec4dd6722e05b90b9676211b4 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710001891 -0300	update by push
dc3792646edae26ec4dd6722e05b90b9676211b4 e700bf3d6f848c37d00e696d4c5d9903c8466a27 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710008967 -0300	update by push
e700bf3d6f848c37d00e696d4c5d9903c8466a27 e035b286871560206b9f2d42159ec28920892721 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010106 -0300	update by push
e035b286871560206b9f2d42159ec28920892721 0d8ca03d3217f0130a3a802d5f0e7e04045ccf1f Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010417 -0300	update by push
0d8ca03d3217f0130a3a802d5f0e7e04045ccf1f 3c1f2ddd85f0b216fcb35bbb21a72453a9e81634 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010642 -0300	pull -r origin main: fast-forward
3c1f2ddd85f0b216fcb35bbb21a72453a9e81634 8246ec0259b51f308d3b46c3bb8aeb70878911c5 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010655 -0300	update by push
8246ec0259b51f308d3b46c3bb8aeb70878911c5 3638f1f9552ce141bd53f3522b6a0640abe2dff5 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010821 -0300	pull: fast-forward
3638f1f9552ce141bd53f3522b6a0640abe2dff5 c138b6aa0d46a85f0a4a95d43fe3ed8dacc5e8e9 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010886 -0300	update by push
c138b6aa0d46a85f0a4a95d43fe3ed8dacc5e8e9 93856da6c768dd98a5ff96f3fdda99fab280b7eb Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011708 -0300	pull -r origin main: fast-forward
93856da6c768dd98a5ff96f3fdda99fab280b7eb 971623d62741c2ee615f1d1fd31aba92fa3b5996 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011710 -0300	update by push
971623d62741c2ee615f1d1fd31aba92fa3b5996 1ffe9359847823ddaf8d53f2de033986efbf812d Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011823 -0300	pull -r origin main: fast-forward
1ffe9359847823ddaf8d53f2de033986efbf812d 3a90366b100df67d46c10612b5248a6e733d23a5 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011826 -0300	update by push
3a90366b100df67d46c10612b5248a6e733d23a5 cb8109e4c54904036810fffaf01321436b22c4b9 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011907 -0300	pull: fast-forward
cb8109e4c54904036810fffaf01321436b22c4b9 ae468087bed19efcf6ea8c40df1344aca1316f80 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011970 -0300	update by push
ae468087bed19efcf6ea8c40df1344aca1316f80 9dc300b19fbb5ba261e8eda2aabd334523e90499 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710257104 -0300	pull -r origin main: fast-forward
9dc300b19fbb5ba261e8eda2aabd334523e90499 6e294935a33722fe072f09d10baf71c6611006f4 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710257107 -0300	update by push
6e294935a33722fe072f09d10baf71c6611006f4 7cb7451d1e89662c710402055027b6ef69e2eed7 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710260507 -0300	pull -r origin main: fast-forward
7cb7451d1e89662c710402055027b6ef69e2eed7 2f10bb4403f5d2f90bac4271bf16845ebd3b688b Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710260510 -0300	update by push


File: .git/logs/refs/heads/main
0000000000000000000000000000000000000000 97f6c630aad2e9da23fd99d0f2847c0eb70a70aa Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1705695531 -0300	clone: from https://github.com/lguibr/comai.git
97f6c630aad2e9da23fd99d0f2847c0eb70a70aa 631c48ad46d1bd7b1da63940a9cb4abb86434340 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709938374 -0300	commit: [FEA] Add continuous integration, .gitignore, and refactored README.md
631c48ad46d1bd7b1da63940a9cb4abb86434340 02d151397bc1ffb5b084dbd6e1fe1ebf9a919a99 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709938775 -0300	commit: [ENH] Refactor cli.py and update dependencies in setup.py
02d151397bc1ffb5b084dbd6e1fe1ebf9a919a99 631c48ad46d1bd7b1da63940a9cb4abb86434340 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709939524 -0300	reset: moving to HEAD~1
631c48ad46d1bd7b1da63940a9cb4abb86434340 97f6c630aad2e9da23fd99d0f2847c0eb70a70aa Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709939528 -0300	reset: moving to HEAD~1
97f6c630aad2e9da23fd99d0f2847c0eb70a70aa a1561890fdaa5c5667e23bf4476254e55f1e48ae Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709939618 -0300	commit: [FEA] Add Python-based Comai CLI tool for generating AI-assisted commit messages
a1561890fdaa5c5667e23bf4476254e55f1e48ae 6d816597fdb0fa37bd178642e8a9c40e55a8840b Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709943817 -0300	commit: FEA Add pre-commit config and update setup for code quality
6d816597fdb0fa37bd178642e8a9c40e55a8840b fc5aa7fd7e3d92649831b56d3982658ca3ab1e7d Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709944029 -0300	commit: [ENH] Update PyPI publishing workflow to use a dedicated user for authentication
fc5aa7fd7e3d92649831b56d3982658ca3ab1e7d e5498d38b077925ffb71a2197bf94da92f4e620e Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709944389 -0300	commit: ENH Introduce project dependencies in a requirements.txt file
e5498d38b077925ffb71a2197bf94da92f4e620e 0d09355e0597564d3a66a8ca4885f57712c5c4f3 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709944572 -0300	commit: FEA Add requirements installation to GitHub Actions
0d09355e0597564d3a66a8ca4885f57712c5c4f3 e25f7868977643c86f80736b0fbf44a03d2d3104 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709944761 -0300	commit: [ENH] Streamline requirements.txt and setup.py dependencies
e25f7868977643c86f80736b0fbf44a03d2d3104 7814a453e9ecfd79e12a3c229dc7d89e7e8274f3 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709945276 -0300	commit: [ENH] Improve project setup and documentation
7814a453e9ecfd79e12a3c229dc7d89e7e8274f3 e9c1d0933ff45924840cd765e1fad3b44aa541c6 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709945502 -0300	commit: [FEA] commitai: Generate informative commit messages using AI
e9c1d0933ff45924840cd765e1fad3b44aa541c6 321aab66100e079bca5bb3057bd263e8c35af97d Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709946243 -0300	commit: [FEA] Add GitHub Actions workflow for publishing to PyPI
321aab66100e079bca5bb3057bd263e8c35af97d e9c1d0933ff45924840cd765e1fad3b44aa541c6 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709946355 -0300	reset: moving to HEAD~1
e9c1d0933ff45924840cd765e1fad3b44aa541c6 321aab66100e079bca5bb3057bd263e8c35af97d Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709946378 -0300	pull: Fast-forward
321aab66100e079bca5bb3057bd263e8c35af97d 1beb8c94d994f8853cd2b8b792afcf3680f81f83 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709946423 -0300	commit: [ ENH ] Add PyPI authentication for publishing package
1beb8c94d994f8853cd2b8b792afcf3680f81f83 a9da2967195c2aae5c93d3560f323044d7e060f5 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709947372 -0300	commit: [ENH] Improve setup.py with additional metadata for better package distribution
a9da2967195c2aae5c93d3560f323044d7e060f5 db690b6b50d3aa683f8ab5c650593f8e283260b1 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709948753 -0300	commit: [ENH] Improve setup.py with additional metadata for better package distribution
db690b6b50d3aa683f8ab5c650593f8e283260b1 93b3fe16ed57c8cca277e4abfbe03f79605f0e16 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1709948903 -0300	commit: ENH Improve setup.py by fixing project URL formatting
93b3fe16ed57c8cca277e4abfbe03f79605f0e16 dc3792646edae26ec4dd6722e05b90b9676211b4 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710001887 -0300	commit: [ENH] Improve project metadata and packaging configuration
dc3792646edae26ec4dd6722e05b90b9676211b4 e700bf3d6f848c37d00e696d4c5d9903c8466a27 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710008965 -0300	commit: [ENH] Enhance CI/CD pipeline with version bumping and PyPI publishing
e700bf3d6f848c37d00e696d4c5d9903c8466a27 e035b286871560206b9f2d42159ec28920892721 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010105 -0300	commit: [ENH] Update pre-commit hooks and add setuptools to requirements
e035b286871560206b9f2d42159ec28920892721 0d8ca03d3217f0130a3a802d5f0e7e04045ccf1f Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010414 -0300	commit: [ENH] Add setuptools and types-setuptools as dependencies
0d8ca03d3217f0130a3a802d5f0e7e04045ccf1f a03449e29a8ca582ce978d2b9d030ce722a42a2c Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010630 -0300	commit: [ENH] Add badges to README for CI status, PyPI version, Python version, and license
a03449e29a8ca582ce978d2b9d030ce722a42a2c 8246ec0259b51f308d3b46c3bb8aeb70878911c5 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010642 -0300	pull -r origin main (finish): refs/heads/main onto 3c1f2ddd85f0b216fcb35bbb21a72453a9e81634
8246ec0259b51f308d3b46c3bb8aeb70878911c5 3638f1f9552ce141bd53f3522b6a0640abe2dff5 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010821 -0300	pull: Fast-forward
3638f1f9552ce141bd53f3522b6a0640abe2dff5 c138b6aa0d46a85f0a4a95d43fe3ed8dacc5e8e9 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710010884 -0300	commit: [ENH] Enhance README with project details, usage instructions, and license information
c138b6aa0d46a85f0a4a95d43fe3ed8dacc5e8e9 ca052eee1f66fd1e50f07f88b6aaa37d93f271d8 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011701 -0300	commit: [ENH] Improve README with updated project name, badges, and description
ca052eee1f66fd1e50f07f88b6aaa37d93f271d8 971623d62741c2ee615f1d1fd31aba92fa3b5996 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011708 -0300	pull -r origin main (finish): refs/heads/main onto 93856da6c768dd98a5ff96f3fdda99fab280b7eb
971623d62741c2ee615f1d1fd31aba92fa3b5996 7e3b30970041dd50885b5bdaba2b4f7ae87d124c Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011816 -0300	commit: [ENH] Update README with correct license badge link
7e3b30970041dd50885b5bdaba2b4f7ae87d124c 3a90366b100df67d46c10612b5248a6e733d23a5 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011823 -0300	pull -r origin main (finish): refs/heads/main onto 1ffe9359847823ddaf8d53f2de033986efbf812d
3a90366b100df67d46c10612b5248a6e733d23a5 cb8109e4c54904036810fffaf01321436b22c4b9 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011907 -0300	pull: Fast-forward
cb8109e4c54904036810fffaf01321436b22c4b9 ae468087bed19efcf6ea8c40df1344aca1316f80 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710011968 -0300	commit: [ENH] Update README badges and links to reflect new repository name
ae468087bed19efcf6ea8c40df1344aca1316f80 ef1310162f0e618722881e82569697a0d9ccc566 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710255137 -0300	commit: ENH Improve handling of commit message template
ef1310162f0e618722881e82569697a0d9ccc566 6e294935a33722fe072f09d10baf71c6611006f4 Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710257104 -0300	pull -r origin main (finish): refs/heads/main onto 9dc300b19fbb5ba261e8eda2aabd334523e90499
6e294935a33722fe072f09d10baf71c6611006f4 bf6e2b15fe37237493cf4997d8595191bc8fb27e Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710259969 -0300	commit: ENH Improve CLI functionality and remove unnecessary features
bf6e2b15fe37237493cf4997d8595191bc8fb27e 2f10bb4403f5d2f90bac4271bf16845ebd3b688b Luis Guilherme Pelin Martins <lgpelin92@gmail.com> 1710260507 -0300	pull -r origin main (finish): refs/heads/main onto 7cb7451d1e89662c710402055027b6ef69e2eed7
